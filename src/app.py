from flask import Flask, jsonify, request
import validators
from utils.utils import validate_schema, custom_base62_encode
from src.models import db, URLS
from src.schemas import URLSchema
import os

app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] = f"postgresql://postgres:password@fincome-db:5432/mydatabase"

SHORT_URL_PREFIX = "http://short.est/"


@app.route("/encode", methods=["POST"])
@validate_schema(URLSchema())
def encode_url(url):
    existing_url = URLS.query.filter_by(original=url).first()
    if existing_url:
        return jsonify(short_url=f"{SHORT_URL_PREFIX}{existing_url.short}")
    new_url_shortened = URLS(original=url)
    db.session.add(new_url_shortened)
    db.session.commit()  # Commit for the first time to get the unique id generated by the db
    short_id = custom_base62_encode(new_url_shortened.id)
    new_url_shortened.short = short_id
    db.session.commit()
    return jsonify(short_url=f"{SHORT_URL_PREFIX}{short_id}")


@app.route("/decode", methods=["GET"])
def decode_url():
    # Retrieve the short_url from the query parameters
    short_url = request.args.get("short_url")
    if (
        not short_url
        or not validators.url(short_url)
        or not short_url.startswith(SHORT_URL_PREFIX)
    ):
        return jsonify(error="Bad Request", message="Invalid or missing short URL"), 400
    short_id = short_url.split("/")[-1]
    url_data = db.session.query(URLS).filter(URLS.short == short_id).first()
    if url_data:
        return jsonify(original_url=url_data.original)
    else:
        return jsonify(error="Not Found", message="Short URL not found"), 404

if __name__ == "app":
    db.init_app(app)
    with app.app_context():
        db.create_all()
    
if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(debug=True)
